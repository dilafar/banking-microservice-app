name: ConfigServer Workflow

on:
  workflow_call:
    inputs:
      build_number:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      REGISTRY:
        required: true
      GITHUB_TOKEN:
        required: true
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: banking-app
  EKS_CLUSTER: banking-eks
  AWS_S3_BUCKET: banking-microservice-jar
  CACHE_DIR: /home/runner/work/_temp/trivy
defaults:
  run:
    shell: bash

jobs:
  configserver-job:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v3


      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'


      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


      - name: Increment Backend App Version
        run: |
          cd configserver
          mvn build-helper:parse-version versions:set \
              -DnewVersion="${{ env.version }}-${{ inputs.build_number }}" \
              versions:commit
          version=$(grep -oPm1 '(?<=<version>)[^<]+' pom.xml)
          echo "IMAGE_VERSION=$version-${{ inputs.build_number }}" >> $GITHUB_ENV
          echo "Backend app version: $version"


      - name: Build and Package Backend
        run: |
          cd configserver
          mvn clean package
          mvn test


      - name: Upload JAR to S3
        run: |
          cd configserver
          aws s3 cp target/*.jar s3://${{ env.AWS_S3_BUCKET }}/configserver-v${{ env.IMAGE_VERSION }}.jar


      - name: Start ConfigServer JAR
        run: |
          cd configserver
          java -jar target/*.jar &


      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy


      - name: Check Trivy
        run: trivy --help


      - name: Cache Trivy Database
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}
          key: trivydb


      - name: Trivy Docker Image Scan
        run: |
          bash trivy-docker-image-scan.sh configserver/Dockerfile ${{ env.CACHE_DIR }}


      - name: Run OPA Docker Scan
        run: |
          cd configserver
          docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy dockerfile-security.rego Dockerfile


      - name: Lint Dockerfile with Hadolint
        run: |
          cd configserver
          docker run --rm -i hadolint/hadolint < Dockerfile | tee reports/docker-lint/hadolint_configserver.txt


      - name: Build & Upload Docker Image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: configserver-v${{ env.IMAGE_VERSION }}
          daemon_off: false
          dockerfile: configserver/Dockerfile
          context: configserver


      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Scan Deployed Docker Image with Trivy
        run: |
          bash trivy-k8s-scan.sh ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}:configserver-v${{ env.IMAGE_VERSION }} ${{ env.CACHE_DIR }} trivy-configserver.json


      - name: Run CIS Docker Benchmark
        run: |
          bash trivy-docker-bench.sh ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}:configserver-v${{ env.IMAGE_VERSION }} trivy-bench-configserver.json

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git pull origin main || true
          git add .
          git commit -m "configserver microservice changes updated by GitHub Actions"
          git push origin main
