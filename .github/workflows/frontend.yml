name: Frontend Workflow

on:
  workflow_call:
    outputs:
      VERSION:
        description: "The first output string"
        value: ${{ jobs.frontend-job.outputs.output1 }}
    inputs:
      build_number:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      ACR_LOGIN_SERVER:
        required: true
      ACR_USERNAME:
        required: true
      ACR_PASSWORD:
        required: true
env:
  ACR_REPOSITORY: banking-app
  CACHE_DIR: /home/runner/work/_temp/trivy
defaults:
  run:
    shell: bash

jobs:
  frontend-job:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    outputs:
      output1: ${{ steps.imageVersion.outputs.VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: SERVICE_PRINCIPAL

      - name: Application Version increment
        id: read-version
        run: |
          cd frontend
          npm version patch --no-git-tag-version
          package_version=$(node -p "require('./package.json').version")
          echo "Application version: $package_version"
          echo "version=$package_version-${{ inputs.build_number }}" >> $GITHUB_ENV

      - id: imageVersion
        run: echo "VERSION=${{ env.version }}" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        run: |
          cd frontend
          npm install

      - name: Display Application Version
        run: |
          echo "The updated application version is: ${{ env.version }}"

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

#      - name: check Trivy
#        run: trivy --help
#
#      - name: Cache Trivy Database
#        uses: actions/cache@v4
#        with:
#          path: ${{ env.CACHE_DIR }}
#          key: trivydb
#
#      - name: Trivy Scan
#        run: |
#          bash trivy-docker-image-scan.sh frontend/Dockerfile ${{ env.CACHE_DIR }}
#
#      - name: Run OPA Docker Scan
#        run: |
#          cd frontend
#          docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy dockerfile-security.rego Dockerfile
#
#      - name: Lint Dockerfile with Hadolint
#        run: |
#          cd frontend
#          docker run --rm -i hadolint/hadolint < Dockerfile | tee hadolint_frontend.txt

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build & Push Docker Image to ACR
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.ACR_REPOSITORY }}:frontend-v${{ env.version }}

#      - name: Trivy Scan Deployed Account Imange
#        run: |
#          bash trivy-k8s-scan.sh ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.ACR_REPOSITORY }}:frontend-v${{ env.version }} ${{ env.CACHE_DIR }} trivy-frontend.json
#
#      - name: Run CIS Docker Benchmark
#        run: |
#          bash trivy-docker-bench.sh ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.ACR_REPOSITORY }}:frontend-v${{ env.version }} trivy-bench-frontend.json

#      - name: Configure Git
#        run: |
#          git config --global user.name "github-actions[bot]"
#          git config --global user.email "github-actions[bot]@users.noreply.github.com"
#
#      - name: Commit and Push Changes
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          git pull origin microservice-azure || true
#          cp frontend/hadolint_frontend.txt reports/docker-lint/hadolint_frontend.txt
#          git add .
#          git commit -m "frontend microservice changes updated by GitHub Actions"
#          git push origin microservice-azure

