name: Loans Workflow
on:
  workflow_call:
    inputs:
      build_number:
        required: true
        type: string
    secrets:
      SONAR_PROJECT_KEY:
        required: true
      SONAR_ORGANIZATION:
        required: true
      SONAR_TOKEN:
        required: true
      SONAR_URL:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      REGISTRY:
        required: true
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: banking-app
  EKS_CLUSTER: banking-eks
  AWS_S3_BUCKET: banking-microservice-artifact
  CACHE_DIR: /home/runner/work/_temp/trivy
defaults:
  run:
    shell: bash

jobs:
  loans-job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Increment app version
        run: |
          cd loans
          echo "Incrementing app version..."
          mvn build-helper:parse-version versions:set \
              -DnewVersion=\"\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}\" \
              versions:commit
          version=$(grep -oPm1 '(?<=<version>)[^<]+' pom.xml)
          echo "IMAGE_VERSION=$version-${{ inputs.build_number }}" >> $GITHUB_ENV

      - name: Build and package
        run: |
          cd loans
          mvn clean package

      - name: Run Tests
        run: |
          cd loans
          mvn test

      - name: Upload JAR to S3
        run: |
          cd loans
          aws s3 cp target/*.jar s3://${{ env.AWS_S3_BUCKET }}/loans-v${{ env.IMAGE_VERSION }}.jar

      - name: Checkstyle
        run: |
          cd loans
          mvn checkstyle:checkstyle

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan
        run: |
          cd loans
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/ \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
            -Dsonar.java.binaries=target/test-classes/com/assignment/loans/

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: check Trivy
        run: trivy --help

      - name: Cache Trivy Database
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}
          key: trivydb

      - name: Trivy Scan
        run: |
          bash trivy-docker-image-scan.sh loans/Dockerfile ${{ env.CACHE_DIR }}

      - name: Run OPA Docker Scan
        run: |
          cd loans
          docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy dockerfile-security.rego Dockerfile

      - name: Lint Dockerfile with Hadolint
        run: |
          cd loans
          docker run --rm -i hadolint/hadolint < Dockerfile | tee hadolint_loans.txt

      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: loans-v${{ env.IMAGE_VERSION }}
          daemon_off: false
          dockerfile: loans/Dockerfile
          context: loans

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Trivy Scan Deployed Account Imange
        run: |
          bash trivy-k8s-scan.sh ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}:loans-v${{ env.IMAGE_VERSION }} ${{ env.CACHE_DIR }} trivy-loans.json

      - name: Run CIS Docker Benchmark
        run: |
          bash trivy-docker-bench.sh ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}:loans-v${{ env.IMAGE_VERSION }} trivy-bench-loans.json

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git pull origin main || true
          cp loans/hadolint_loans.txt reports/docker-lint/hadolint_loans.txt
          git add .
          git commit -m "loans microservice changes updated by GitHub Actions"
          git push origin main

    #  - name: SonarQube Quality Gate check
    #    id: sonarqube-quality-gate-check
    #    uses: sonarsource/sonarqube-quality-gate-action@master
    #    with:
     #     scanMetadataReportFile: loans/.scannerwork/report-task.txt
    #      pollingTimeoutSec: 300
     #   env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #    SONAR_HOST_URL: ${{ secrets.SONAR_URL }}