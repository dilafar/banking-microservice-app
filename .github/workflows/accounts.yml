name: Accounts Workflow
on:
  workflow_call:
    outputs:
      IMAGE_VERSION:
        description: "The first output string"
        value: ${{ jobs.build-and-push.outputs.output1 }}
    inputs:
      build_number:
        required: true
        type: string
    secrets:
      SONAR_PROJECT_KEY:
        required: true
      SONAR_ORGANIZATION:
        required: true
      SONAR_TOKEN:
        required: true
      SONAR_URL:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      REGISTRY:
        required: true
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: banking-app
  EKS_CLUSTER: banking-eks
  CACHE_DIR: /home/runner/work/_temp/trivy
defaults:
  run:
    shell: bash

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    outputs:
      output1: ${{ steps.imageVersion.outputs.IMAGE_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Increment app version
        run: |
          cd accounts
          echo "Incrementing app version..."
          mvn build-helper:parse-version versions:set \
              -DnewVersion=\"\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}\" \
              versions:commit
          version=$(grep -oPm1 '(?<=<version>)[^<]+' pom.xml)
          echo "IMAGE_VERSION=$version-${{ inputs.build_number }}" >> $GITHUB_ENV

      - id: imageVersion
        run: echo "IMAGE_VERSION=${{ env.IMAGE_VERSION }}" >> $GITHUB_OUTPUT

      - name: Build and package
        run: |
          cd accounts
          mvn clean package

      - name: Run Tests
        run: |
          cd accounts
          mvn test

      - name: Checkstyle
        run: |
          cd accounts 
          mvn checkstyle:checkstyle

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan
        run: |
          cd accounts
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/ \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
            -Dsonar.java.binaries=target/test-classes/com/assignment/accounts/

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: accounts/.scannerwork/report-task.txt
          pollingTimeoutSec: 300
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: check Trivy
        run: trivy --help

      - name: Cache Trivy Database
        uses: actions/cache@v4
        with:
            path: ${{ env.CACHE_DIR }}
            key: trivydb

      - name: Trivy Scan
        run: |
          bash trivy-docker-image-scan.sh accounts/Dockerfile ${{ env.CACHE_DIR }}

      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
            access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
            secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            registry: ${{ secrets.REGISTRY }}
            repo: ${{ env.ECR_REPOSITORY }}
            region: ${{ env.AWS_REGION }}
            tags: accounts-v${{ env.IMAGE_VERSION }}
            daemon_off: false
            dockerfile: accounts/Dockerfile
            context: accounts

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Trivy Scan Deployed Account Imange
        run: |
          bash trivy-k8s-scan.sh ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}:accounts-v${{ env.IMAGE_VERSION }} ${{ env.CACHE_DIR }}