services:
  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    volumes:
      - "./kafka_data:/bitnami/kafka"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    extends:
      file: common-config.yml
      service: network-deploy-service

  kafka-ui:
      image: provectuslabs/kafka-ui:latest
      container_name: kafka-ui
      ports:
        - "8050:8080"
      depends_on:
        - kafka
      environment:
        DYNAMIC_CONFIG_ENABLED: "true"
        KAFKA_CLUSTERS_0_NAME: "kafka_ms_test"
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      extends:
        file: common-config.yml
        service: network-deploy-service

  client:
    image: fadhiljr/banking-microservice:frontend-v1
    container_name: frontend
    ports:
      - "443:443"
  accountsdb:
    container_name: accountsdb
    ports:
      - 3309:3306
    environment:
      MYSQL_DATABASE: accountsdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  loansdb:
    container_name: loansdb
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: loansdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  cardsdb:
    container_name: cardsdb
    ports:
      - 3308:3306
    environment:
      MYSQL_DATABASE: cardsdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  configserver:
    image: "fadhiljr/banking-microservice:config-server-v1"
    container_name: configserver-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8071"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: "fadhiljr/banking-microservice:eureka-server-v1"
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8070" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    depends_on:
      configserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"

  accounts:
    image: "fadhiljr/banking-microservice:accounts-v1"
    container_name: accounts-ms
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8080" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    depends_on:
      accountsdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3306/accountsdb"
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  loans:
    image: "fadhiljr/banking-microservice:loans-v2"
    container_name: loans-ms
    ports:
      - "8090:8090"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8090" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    depends_on:
      loansdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "loans"
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3306/loansdb"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  cards:
    image: "fadhiljr/banking-microservice:cards-v3"
    container_name: cards-ms
    ports:
      - "9000:9000"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9000" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    depends_on:
      cardsdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "cards"
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3306/cardsdb"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  gatewayserver:
    image: "fadhiljr/banking-microservice:gateway-v1"
    container_name: gatewayserver-ms
    ports:
      - "8072:8072"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8072" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    depends_on:
      accounts:
        condition: service_healthy
      loans:
        condition: service_healthy
      cards:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ../../monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:7.15.2
    container_name: logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - /logs/sample.log:/usr/share/logstash/data/sample.log
      - ./logs:/usr/share/logstash/logs
    ports:
      - 5000:5000
    environment:
      - 'LS_JAVA_OPTS=-Xmx256m -Xms256m'
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.2
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - 'NODE_OPTIONS=--max-old-space-size=2048'
    networks:
      - elk
    depends_on:
      - elasticsearch

  message:
    image: "fadhiljr/banking-microservice:message-v1"
    container_name: message-ms
    environment:
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    extends:
      file: common-config.yml
      service: network-deploy-service


networks:
  banks:
    driver: "bridge"
  elk:
    driver: "bridge"

volumes:
  es-data:
    driver: local